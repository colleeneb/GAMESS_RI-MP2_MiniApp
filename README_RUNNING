 This contains a minikernel for the RI-MP2 OpenMP
 Fortran code by Buu Pham.

 An input file is ben_kernel.inp

 1. Submit an interactive job:
    $ bsub -W 1:00 -nnodes 1 -P gen129 -Is $SHELL

 2. Compile the files
    $ make 

 3. Use jsun to run each simple example:
    1 MPI rank:
    $ jsrun -n 1 -a 1 -c 1 -g 1 ./rimp2 ben_kernel.inp

       -n is the nubmer of resource sets,
       -a is the number of MPI ranks,
       -c is the number of physical cores,
       -g is the number of GPUs
       -b specifies binding
          usage: "-b packed:N" (where N is the number of HW threads
          that are bound to the task, up to the number of
          HW threads that are available. so if we have OMP_NUM_THREADS=4 and
          -a 1 (1 rank) and -c 4 (4 cores (16 HW threads) per rank), then we can go up
          to packed:4, where we'll jump by 4 HW threads between OpenMP threads
          (we only have 16 HW threads in the 4 cores. default is packed:1) )

    1 MPI rank, 42 OpenMP threads:
    $ OMP_PROC_BIND=spread OMP_NUM_THREADS=42 jsrun -n 1 -c 42 -a 1 -b packed:42 -g 0 ./rimp2 ben_kernel.inp

     etc.

